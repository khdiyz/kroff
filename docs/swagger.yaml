definitions:
  handler.getProductsPublicResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ProductPublic'
        type: array
      pagination:
        $ref: '#/definitions/models.Pagination'
    type: object
  handler.loginResponse:
    properties:
      token:
        type: string
    type: object
  models.Category:
    properties:
      id:
        type: integer
      name:
        $ref: '#/definitions/models.NameTranslation'
      photo:
        type: string
    type: object
  models.CategoryPublic:
    properties:
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      product_count:
        type: integer
    type: object
  models.CreateCategory:
    properties:
      name:
        $ref: '#/definitions/models.NameTranslation'
      photo:
        type: string
    type: object
  models.CreateProduct:
    properties:
      category_id:
        type: integer
      code:
        type: string
      name:
        $ref: '#/definitions/models.NameTranslation'
      photo:
        type: string
      price:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      password:
        default: admin
        type: string
      username:
        default: admin
        type: string
    required:
    - password
    - username
    type: object
  models.NameTranslation:
    properties:
      ru:
        type: string
      uz:
        type: string
    type: object
  models.Pagination:
    properties:
      limit:
        default: 10
        type: integer
      page:
        default: 1
        type: integer
      pageCount:
        type: integer
      totalCount:
        type: integer
    type: object
  models.Product:
    properties:
      category_id:
        type: integer
      code:
        type: string
      id:
        type: integer
      name:
        $ref: '#/definitions/models.NameTranslation'
      photo:
        type: string
      price:
        type: integer
    type: object
  models.ProductPublic:
    properties:
      category_id:
        type: integer
      code:
        type: string
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      price:
        type: integer
    type: object
  models.UpdateCategory:
    properties:
      id:
        type: integer
      name:
        $ref: '#/definitions/models.NameTranslation'
      photo:
        type: string
    type: object
  models.UpdateProduct:
    properties:
      category_id:
        type: integer
      code:
        type: string
      name:
        $ref: '#/definitions/models.NameTranslation'
      photo:
        type: string
      price:
        type: integer
    type: object
  response.BaseResponse:
    properties:
      message:
        type: string
    type: object
  response.IdResponse:
    properties:
      id:
        type: string
    type: object
host: localhost:4040
info:
  contact: {}
  description: API Server for Kroff
  title: Kroff API
  version: "1.0"
paths:
  /api/v1/admin/categories:
    get:
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.IdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Create category
      tags:
      - Category
  /api/v1/admin/categories/{id}:
    delete:
      description: Delete category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - Category
    get:
      description: Get category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get category by ID
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - Category
  /api/v1/admin/files:
    post:
      consumes:
      - multipart/form-data
      description: Upload file
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.IdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload file
      tags:
      - Storage
  /api/v1/admin/products:
    get:
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProduct'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.IdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - products
  /api/v1/admin/products/{id}:
    delete:
      description: Delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - products
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - products
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login to the system
      parameters:
      - description: Login request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Login
      tags:
      - Auth
  /api/v1/categories:
    get:
      description: Get all categories public
      parameters:
      - description: Accept-Language
        enum:
        - uz
        - ru
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CategoryPublic'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get all categories public
      tags:
      - Category
  /api/v1/products:
    get:
      description: Get all products public
      parameters:
      - description: Category ID
        in: query
        name: categoryId
        type: string
      - default: 1
        description: page
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: page limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Accept-Language
        enum:
        - uz
        - ru
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.getProductsPublicResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get all products public
      tags:
      - products
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
